{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","hasError","onChange","useState","Math","random","toFixed","slice","id","touched","setTouched","htmlFor","type","classNames","e","newValue","target","onBlur","NewMovie","onAdd","count","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","titleError","setTitleError","imgUrlError","setImgUrlError","imdbUrlError","setImdbUrlError","imdbIdError","setImdbIdError","valueCheck","trim","handleInputChange","event","setStateFunction","setErrorFunction","isAddDisabled","onSubmit","preventDefault","disabled","App","moviesFromServer","newMovies","setNewMovies","newMovie","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.71b2bfd5.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => {\n  return (\n    <div className=\"movies\">\n      {movies.map(movie => (\n        <MovieCard\n          key={movie.imdbId}\n          movie={movie}\n        />\n      ))}\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  hasError?: boolean,\n  onChange?: (newValue: string) => void;\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  hasError = false,\n  onChange = () => {},\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newValue = e.target.value;\n\n    if (onChange) {\n      onChange(newValue);\n    }\n  };\n\n  const [touched, setTouched] = useState(false);\n\n  const handleBlur = () => {\n    setTouched(true);\n\n    if (!value) {\n      setTouched(true);\n    } else {\n      setTouched(false);\n    }\n\n    if (name === 'description') {\n      setTouched(false);\n    }\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || touched,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={handleInputChange}\n          onBlur={handleBlur}\n        />\n      </div>\n\n      {(hasError || touched) && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count] = useState(0);\n\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const [titleError, setTitleError] = useState(false);\n  const [imgUrlError, setImgUrlError] = useState(false);\n  const [imdbUrlError, setImdbUrlError] = useState(false);\n  const [imdbIdError, setImdbIdError] = useState(false);\n\n  const valueCheck = title.trim() === ''\n  || imgUrl.trim() === ''\n  || imdbUrl.trim() === ''\n  || imdbId.trim() === '';\n\n  const handleInputChange = (\n    event: string,\n    setStateFunction: React.Dispatch<React.SetStateAction<string>>,\n    setErrorFunction: React.Dispatch<React.SetStateAction<boolean>>,\n  ) => {\n    setStateFunction(event);\n    setErrorFunction(false);\n  };\n\n  const isAddDisabled = !title || !imgUrl || !imdbUrl || !imdbId;\n\n  const handleAdd = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (isAddDisabled || valueCheck) {\n      setTitleError(true);\n      setImgUrlError(true);\n      setImdbUrlError(true);\n      setImdbIdError(true);\n\n      return;\n    }\n\n    onAdd({\n      title,\n      description,\n      imgUrl,\n      imdbUrl,\n      imdbId,\n    });\n\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n    setTitleError(false);\n    setImgUrlError(false);\n    setImdbUrlError(false);\n    setImdbIdError(false);\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleAdd}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        value={title}\n        label=\"Title\"\n        onChange={(value) => handleInputChange(value, setTitle, setTitleError)}\n        hasError={titleError}\n      />\n\n      <TextField\n        name=\"description\"\n        value={description}\n        label=\"Description\"\n        onChange={(value) => handleInputChange(value, setDescription, () => {})}\n        hasError={false}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        value={imgUrl}\n        label=\"Image URL\"\n        onChange={(value) => handleInputChange(\n          value,\n          setImgUrl,\n          setImgUrlError,\n        )}\n        hasError={imgUrlError}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        value={imdbUrl}\n        label=\"Imdb URL\"\n        onChange={(value) => handleInputChange(\n          value,\n          setImdbUrl,\n          setImdbUrlError,\n        )}\n        hasError={imdbUrlError}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        value={imdbId}\n        label=\"Imdb ID\"\n        onChange={(value) => handleInputChange(\n          value,\n          setImdbId,\n          setImdbIdError,\n        )}\n        hasError={imdbIdError}\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isAddDisabled || valueCheck}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [newMovies, setNewMovies] = useState<Movie[]>(moviesFromServer);\n\n  const addMovie = (newMovie: Movie) => {\n    setNewMovies(currentMovies => [...currentMovies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={newMovies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}