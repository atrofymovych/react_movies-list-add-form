{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","hasError","onChange","useState","Math","random","toFixed","slice","id","touched","setTouched","htmlFor","type","classNames","e","target","onBlur","NewMovie","onAdd","count","setCount","newMovie","setNewMovie","titleError","imgUrlError","imdbUrlError","imdbIdError","newMovieError","setNewMovieError","valueCheck","trim","handleChange","newValue","prevMovie","isAddDisabled","onSubmit","event","preventDefault","disabled","App","moviesFromServer","newMovies","setNewMovies","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.90215cd2.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => {\n  return (\n    <div className=\"movies\">\n      {movies.map(movie => (\n        <MovieCard\n          key={movie.imdbId}\n          movie={movie}\n        />\n      ))}\n    </div>\n  );\n};\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  hasError?: boolean,\n  onChange: (newValue: string, newName: string) => void;\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  hasError = false,\n  onChange,\n}) => {\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  const [touched, setTouched] = useState(false);\n\n  const handleBlur = () => {\n    setTouched(true);\n\n    if (!value) {\n      setTouched(true);\n    } else {\n      setTouched(false);\n    }\n\n    if (name === 'description') {\n      setTouched(false);\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(name, e.target.value);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || touched,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={handleChange}\n          onBlur={handleBlur}\n        />\n      </div>\n\n      {(hasError || touched) && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (movie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n\n  const [newMovie, setNewMovie] = useState({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n\n  const [newMovieError, setNewMovieError] = useState({\n    titleError: false,\n    imgUrlError: false,\n    imdbUrlError: false,\n    imdbIdError: false,\n  });\n\n  const valueCheck = newMovie.title.trim() === ''\n  || newMovie.imgUrl.trim() === ''\n  || newMovie.imdbUrl.trim() === ''\n  || newMovie.imdbId.trim() === '';\n\n  const handleChange = (name: string, newValue: string) => {\n    setNewMovie((prevMovie) => ({\n      ...prevMovie,\n      [name]: newValue,\n    }));\n  };\n\n  const isAddDisabled = !newMovie.title\n  || !newMovie.imgUrl\n  || !newMovie.imdbUrl\n  || !newMovie.imdbId;\n\n  const handleAdd = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (isAddDisabled) {\n      setNewMovieError({\n        titleError: true,\n        imgUrlError: true,\n        imdbUrlError: true,\n        imdbIdError: true,\n      });\n\n      return;\n    }\n\n    onAdd(newMovie);\n    setCount(count + 1);\n\n    setNewMovie({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n    setNewMovieError({\n      titleError: false,\n      imgUrlError: false,\n      imdbUrlError: false,\n      imdbIdError: false,\n    });\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handleAdd}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        value={newMovie.title}\n        label=\"Title\"\n        onChange={handleChange}\n        hasError={newMovieError.titleError}\n      />\n\n      <TextField\n        name=\"description\"\n        value={newMovie.description}\n        label=\"Description\"\n        onChange={handleChange}\n        hasError={false}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        value={newMovie.imgUrl}\n        label=\"Image URL\"\n        onChange={handleChange}\n        hasError={newMovieError.titleError}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        value={newMovie.imdbUrl}\n        label=\"Imdb URL\"\n        onChange={handleChange}\n        hasError={newMovieError.titleError}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        value={newMovie.imdbId}\n        label=\"Imdb ID\"\n        onChange={handleChange}\n        hasError={newMovieError.titleError}\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isAddDisabled || valueCheck}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [newMovies, setNewMovies] = useState<Movie[]>(moviesFromServer);\n\n  const addMovie = (newMovie: Movie) => {\n    setNewMovies(currentMovies => [...currentMovies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={newMovies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}